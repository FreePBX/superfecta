<?php

class GoogleContacts extends superfecta_base {

    public $description = "Use your personal google contacts list to provide Caller ID.<br><br>This data source requires Superfecta Module version 2.11 or higher.";
    public $version_requirement = "2.11";

    public $source_param = array(
                'Google_ID' => array(
                                'description' => 'Your Google ID, eg. fred@google.com<br>',
                                'type' => 'text',
                                'default' => '',
                ),
                'Google_Code' => array(
                                'description' => 'This is a one off code to authenticate superfecta to Google for you. How to set it: Once you\'ve set your ID (box above), and clicked submit to save it, you should click on debug (below). Further instructions will then be provided in the debug area below. Once you\'ve followed them, copy the code from the Google authentication page into here (replace the "XXX"), click submit, and click debug below, having put a test number in the field below.',
                                'type' => 'text',
                                'default' => 'XXX',
                ),
                'Access_Token' => array(
                                'description' => 'CHANGE AT YOUR PERIL. This is the day to day authorization code for the requests. If it is blank, there is an authorization issue.',
                                'type' => 'password',
                                'default' => '',
                ),
                'Redirect_URI' => array(
                                'description' => 'CHANGE ONLY IF YOU\'RE SURE: Redirect URI to be used with Google OAuth2.0 Authentication<br>- For Google OAuth2.0 Desktop application credentials:  Set to https://127.0.0.1<br>- For Google OAuth2.0 Web application credentials: Set to https://yourfreepbxserver.com/oauth2callback.php<br> (replace yourfreepbxserver.com with your FreePBX FQDN)',
                                'type' => 'text',
                                'default' => '',
                ),
                'Client_ID' => array(
                                'description' => 'CHANGE ONLY IF YOU\'RE SURE: This is how Google CID Superfecta identifies itself to Google.',
                                'type' => 'password',
                                'default' => '',
                ),
                'Client_Secret' => array(
                                'description' => 'CHANGE ONLY IF YOU\'RE SURE: This is how Google CID Superfecta certifies itself with Google.',
                                'type' => 'password',
                                'default' => '',
                ),
                'Append_Phone_Types' => array(
                                'description' => 'Yes - Append phone type to contact name<br>No - Do not append phone type to contact name<br>',
                                'type' => 'checkbox',
                                'default' => 'off',
                ),
                'Use_Nicknames' => array(
                                'description' => 'Yes - Use nicknames as contact names if exist.<br>No - Do not use nicknames.<br>',
                                'type' => 'checkbox',
                                'default' => 'off',
                ),
    );

    var $googleAuthManager;
    var $contactGetter;

    function __construct() {
        set_include_path(dirname(__FILE__)."/../includes/oauth-google/" . PATH_SEPARATOR . get_include_path());
        require_once("GoogleAuthManager.php");
        require_once("Google_Service_ReadContacts.php");

        $this->googleAuthManager = new GoogleAuthManager();
        $this->contactGetter = new Google_Service_ReadContacts($this->googleAuthManager);
    }


    function get_caller_id($thenumber, $run_param=array()) {
        $this->DebugPrint("<br><b>Searching Google Contacts for number: {$thenumber}</b>");
        // These are my Google Project OAuth2 Web Application client Credentials.
        // As of now the Project has not been verified by Google, so only 100 users will be allowed to use them
        // Once it is approved eveyone would be able to
        // You can use your own credentials from your own project
        $default_client_id = "1078714058048-r89e31tdhaqhsaqh2hhv1b0conloftum.apps.googleusercontent.com";
        $default_client_secret = "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";
        $default_redirect_uri = "https://sbenlevypbx.ddns.net/oauth2callback.php";


        // Set up the auth manager for this person.
        if(empty($run_param['Redirect_URI']) or empty($run_param['Client_ID']) or empty($run_param['Client_Secret'])){
            $this->updateRedirectURI($default_redirect_uri);
            $this->updateClientId($default_client_id);
            $this->updateClientSecret($default_client_secret);
            $redirect_uri = $default_redirect_uri;
            $client_id = $default_client_id;
            $client_secret = $default_client_secret;

//            $this->DebugPrint("Using default Redirect URI");
//            $this->DebugPrint("Using default Client ID");
//            $this->DebugPrint("Using default Client Secret");
        }
        else{
            $redirect_uri = $run_param['Redirect_URI'];
            $client_id = $run_param['Client_ID'];
            $client_secret = $run_param['Client_Secret'];
//            $this->DebugPrint("Using runtime parameter Redirect URI");
//            $this->DebugPrint("Using runtime parameter Client ID");
//            $this->DebugPrint("Using runtime parameter Client Secret");
        }

//        $this->DebugPrint("<b>Redirect URI: </b>".$redirect_uri.'<br>');
//        $this->DebugPrint("<b>Client ID: </b>".$client_id.'<br>');
//        $this->DebugPrint("<b>Client Secret: </b>".$client_secret.'<br>');

        $check = $this->googleAuthManager->configure(array(
             'redirect_uri'             => $redirect_uri,
             'client_id'                => $client_id,
             'client_secret'            => $client_secret,
             'user_id'                  => $run_param['Google_ID'],
             'scope'                    => Google_Service_ReadContacts::SCOPE_CONTACTS_READONLY,
             'append_phone_types'       => $run_param['Append_Phone_Types'],
             'use_nicknames'            => $run_param['Use_Nicknames']));

        // Get the previous Access Token, if any
        $access_token_json = NULL;
        if (array_key_exists('Access_Token', $run_param)) {
//            $this->DebugPrint("We have access Token");
            $access_token_json = base64_decode($run_param['Access_Token']);
        }

//        $this->DebugPrint("Access Token Json: ".$access_token_json);

        // Have we got an fresh google code? If so use it.
        if ($this->newGoogleCodeHasBeenSent($run_param)) {
            $this->DebugPrint("A new Google Code has been sent.  Need to get a new access token");
            $access_token_json = $this->googleAuthManager->configure(array('code' => $run_param['Google_Code']));
            if ($access_token_json == null) {
                $this->DebugPrint("Google Code did not result in authentication.");
                $this->giveAuthLink();
                $this->clearUsedOrFailedGoogleCode();
                return null;
            }
//            $this->DebugPrint("New Access Token JSON: ".$access_token_json);
            $this->updateAccessToken($access_token_json);
            $this->clearUsedOrFailedgoogleCode();
        }
        // No code, so hopefully we have a previous access token, if not ...
        else if (strlen($access_token_json) < 10) {
//            $this->DebugPrint("Invalid Access Token JSON: ".$access_token_json);
            $this->DebugPrint("An Access Token is missing: A new authorization is needed.");
            $this->giveAuthLink();
            return null;
        }
        // If we do have the previous access token
        else {
            $access_token_json_check = $this->googleAuthManager->configure(array('access_token_json' => $access_token_json));
            // If the token has been updated, store the new one
            if (strcmp($access_token_json_check, $access_token_json) != 0){
                $this->DebugPrint("Updating Access Token with a new Token");
                $this->updateAccessToken($access_token_json_check);
            } 
        }

        // Final check that the Auth manager is happy
        if ($this->googleAuthManager->needAuthentication()) {
            $this->DebugPrint("For an unclear reason, authorization is failing.");
            $this->giveAuthLink();
            return null;
        }

        // If we've got here, we can actually try and make the call
        $results = $this->contactGetter->getContactsForNumberStarting($thenumber);

        if ($results == null) return null;

        if ($results['success'] === 'no') {
            $this->DebugPrint("Failed to get number: ".$results['data']);
            return null;
        }

        $score = -1;
        $name = null;
        foreach ($results['data'] as $key => $info) {
            $s = $info['score'];
            if ($s > $score) {
                $score = $s;
                $name = $info['name'];
            }
        }

        return $name;
    }

    private function clearUsedOrFailedGoogleCode() {
        $this->updateParameter("Google_Code", "XXX");
    }

    private function updateAccessToken($new_at_json) {
        $this->updateParameter("Access_Token", base64_encode($new_at_json));
//        $this->DebugPrint("Updating Access Token: ".$new_at_json);
//        $this->DebugPrint("Updating Access Token base64: ".base64_encode($new_at_json));
    }

    private function updateRedirectURI($redirect_uri) {
        $this->updateParameter("Redirect_URI", $redirect_uri);
    }

    private function updateClientID($client_id) {
        $this->updateParameter("Client_ID", $client_id);
    }

    private function updateClientSecret($client_secret) {
        $this->updateParameter("Client_Secret", $client_secret);
    }

    private function giveAuthLink() {
        $this->DebugPrint("<h3>To set or reset authorization</h3>Click the link in the next line, then copy the code google give into the second box on the settings area for Google Contacts. Then click submit in the settings, and then use another test number to check all is working.<p>");
        $this->DebugPrint("To start that process, <b>click <a target='_blank' href='".$this->googleAuthManager->codeGettingUrl()."'>here</a></b><p>.");
    }

    private function newGoogleCodeHasBeenSent($run_param) {
        if (strcmp($run_param['Google_Code'], 'XXX') === 0) return false;
        return true;
    }

}
