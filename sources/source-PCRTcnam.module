<?php

/***** ***** ***** ***** ***** ***** ***** *****
 * Module Dev notes:
 * 
 * Version history:
 *   2016-07-27 by frontrangegeeks
 *	 2024-09-01 by defib
 * 
 ***** ***** ***** ***** ***** ***** ***** *****/

class PCRTcnam extends superfecta_base {

	public $description = "Searches Your PC Repair Tracker db - local or remote.";
	public $version_requirement = "1.7";
	public $source_param = array(

		'DB_Host' => array(
				'description' => 'Host address of the PCRT database. (Be sure to allow remote access to your PCRT database for this to work!)',
				'type' => 'text',
				'default' => ''
		),
		'DB_Name' => array(
				'description' => 'PCRT Database Name',
				'type' => 'text',
				'default' => ''
		),
		'DB_User' => array(
				'description' => '',
				'type' => 'text',
				'default' => ''
		),
		'DB_Password' => array(
				'description' => 'PCRT Database Password',
				'type' => 'password',
				'default' => ''
		),
		'Filter_Length' => array(
				'description' => 'The number of rightmost digits to check for a match. Enter zero to disable ',
				'type' => 'number',
				'default' => 10
		),
		'Check_Work_Orders' => array(
				'description' => 'Check through work orders instead of just groups',
				'type' => 'checkbox',
				'default' => 'on'
		),
		'Display_Work_Order_Number' => array(
				'description' => 'Enable to diaplay the Work Order number after the Caller Name if found',
				'type' => 'checkbox',
				'default' => 'on'
		),
		'In_Store_Text' => array(
				'description' => 'Text to display if the work order is in the store. Requires "Check_Work_Orders" to be enabled. Leave Blank to disable',
				'type' => 'text',
				'default' => ''
		),
		'Waiting_For_Parts_Text' => array(
				'description' => 'Text to display if the work order is waiting for parts. Requires "Check_Work_Orders" to be enabled. Leave Blank to disable',
				'type' => 'text',
				'default' => ''
		)
	);


	function get_caller_id($thenumber, $run_param=array()) {
		$caller_id = null;

		if(class_exists('PDO')) {
			$this->DebugPrint("Connecting to PCRT Database....");
			try {
				$dbh = new PDO('mysql:dbname='.$run_param['DB_Name'].';host='.$run_param['DB_Host'], $run_param['DB_User'], $run_param['DB_Password']);
			} catch (PDOException $e) {
				$this->DebugPrint('Connection failed: ' . $e->getMessage());
				return null;
			}
		} else {
			$this->DebugPrint("PDO not present on system...Skipping");
			return null;
		}

		// trim number to filter length if applicable
		if ($run_param['Filter_Length'] != 0) {
			if (strlen($thenumber) > $run_param['Filter_Length']) $thenumber = substr($thenumber, -$run_param['Filter_Length']);
		}

		$sql_params = array();
		$sql = 'SELECT * FROM `pc_group` where `grpcellphone` REGEXP :theregex or `grpworkphone` REGEXP :theregex or `grpphone` REGEXP :theregex';

		//  Build regular expression from the $thenumber to avoid non-digit characters stored in database
		$theregex = "[^0-9]*";
		for( $x=0; $x < ((strlen($thenumber))-1); $x++ )  {
			$theregex .=  substr($thenumber,$x,1)."[^0-9]*";
		}
		$theregex = $theregex.(substr($thenumber,-1))."([^0-9]+|$)";
		$sql_params[':theregex'] = $theregex;

		$sth = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
		if(!$sth) {
			$this->DebugPrint("Failed to Prepare the SQL Statement. Are we connected?...Skipping");
			return null;
		}
		$this->DebugPrint("Connected!");
		$this->DebugPrint("Searching Database...");
		$sth->execute($sql_params);
		$find = $sth->fetch(PDO::FETCH_BOTH);
    
		
		if($find && is_array($find)) {
			$this->DebugPrint("Found..");
			//return $find[1];
			$custName = $find['pcgroupname'];
			$custPCID = $find['pcgroupid'];
			$custName = explode(" ",$custName);
            $firstName = $custName[0];
            $lastName = $custName[1];
			
		/* 
			$sql1 = 'SELECT * FROM `pc_wo` where `pcid` = '.$custPCID;
			$sth1 = $dbh->prepare($sql1, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
			if(!$sth1) {
				$this->DebugPrint("Failed to Prepare the SQL Statement. Are we connected?...Skipping");
				return null;
			}
			$this->DebugPrint("Connected!");
			$this->DebugPrint("Searching Database...");
			$sth1->execute($sql_params);
			$find1 = $sth1->fetch(PDO::FETCH_BOTH);
				$custWOID = $find1['woid'];
				$custStatusId = $find1['pcstatus'];
		
			if ($custStatusId == 1 || $custStatusId == 3 || $custStatusId == 4 || $custStatusId == 6) {
				// Code for the condition when $custStatusId is 1, 3, 4, or 6
				$custStatus = "INS";
			} else if ($custStatusId == 101) {
				// Code for the condition when $custStatusId is 101
				$custStatus = "WFP";
			} else {
				$custStatus = "";
			}
			*/

			return $firstName.' '.$lastName; //.' '.$custWOID.' '.$custStatus;
		} else {
			$this->DebugPrint("Not Found");
			return null;
		}
    }
}
